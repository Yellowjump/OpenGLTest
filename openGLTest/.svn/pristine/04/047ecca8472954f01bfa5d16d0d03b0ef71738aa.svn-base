#version 330 core
layout (location = 0) in vec3 aPos;
layout (location = 1) in vec3 aNormal;
out vec3 FragPos;
out vec3 Normal;
out vec4 outColor;
uniform float myLength;
uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;

uniform vec3 lightPos;
uniform vec3 viewPos;
uniform vec3 lightColor;
uniform vec3 objectColor;
void main()
{
    gl_Position = projection * view * model*vec4(aPos.x*myLength,aPos.y,aPos.z, 1.0);
    FragPos = vec3(model * vec4(aPos.x*myLength,aPos.y,aPos.z, 1.0));
    Normal = transpose(inverse(mat3(model))) * aNormal;
    
    
    float ambientStrength = 0.15;
    vec3 ambient = ambientStrength * lightColor;
    
    // diffuse
    vec3 norm = normalize(Normal);
    vec3 lightDir = normalize(lightPos - FragPos);
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = diff * lightColor;
    
    // specular
    float specularStrength =0.5f;
    vec3 viewDir = normalize(viewPos - FragPos);
    vec3 reflectDir = reflect(-lightDir, norm);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
    vec3 specular = specularStrength * spec * lightColor;
    
    vec3 result = (ambient+diffuse+specular) * objectColor;
    outColor=vec4(result,1);
}
